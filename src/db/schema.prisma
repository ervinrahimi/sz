// This is Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  family                String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  phone                 String?
  username              String?                @unique
  role                  Int                    @default(0)
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  loginTime             DateTime?
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  Authenticators        Authenticator[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  // ارتباط با سفارش‌ها
  orders                Order[]
  UploadedFile          UploadedFile[]

  @@unique([email, username])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Car {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  price          Float
  images         String[]
  // لیست مشخصات فنی
  specifications CarSpecification[]
  // شرایط فروش
  saleConditions CarSaleCondition[]
  // مشخصات ظاهری
  appearances    AppearanceOption[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  Order          Order[]
}

model Order {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String                @db.ObjectId
  car                  Car                   @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId                String                @db.ObjectId
  saleCondition        CarSaleCondition      @relation(fields: [saleConditionId], references: [id], onDelete: Cascade)
  saleConditionId      String                @db.ObjectId
  appearanceSelections AppearanceSelection[]
  // مراحل سفارش
  steps                OrderStep[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  UploadedFile         UploadedFile[]
}

model OrderStep {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String   @db.ObjectId
  stepNumber Int
  status     String // وضعیت مرحله (در حال انجام، تکمیل شده، نیاز به تایید و ...)
  data       Json // داده‌های مرتبط با هر مرحله
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UploadedFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @db.ObjectId
  step      Int // شماره مرحله‌ای که فایل در آن آپلود شده
  fileType  String // نوع فایل (کارت ملی، شناسنامه و ...)
  filePath  String // مسیر فایل در سرور
  createdAt DateTime @default(now())
}

model CarSpecification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  car     Car     @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId   String  @db.ObjectId
  feature String // ویژگی
  value   String // مقدار
  note    String? // یادداشت
}

model AppearanceOption {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  car                 Car                   @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId               String                @db.ObjectId
  title               String // عنوان (مثلاً رنگ بدنه)
  options             String[] // لیست گزینه‌ها
  AppearanceSelection AppearanceSelection[]
}

model CarSaleCondition {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  car                   Car              @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId                 String           @db.ObjectId
  conditionType         String // نوع شرایط (عمومی، خاص، سازمانی)
  method                String // روش فروش (نقدی، اقساطی، علی‌الحساب)
  price                 Float // قیمت کل
  registrationPayment   Float // پرداخت زمان ثبت‌نام
  firstMonthPayment     Float // پرداخت یک ماهه
  totalInstallments     Int // تعداد اقساط
  monthlyInstallment    Float // مبلغ هر قسط
  remainingDeliveryTime Int // مانده زمان تحویل
  finalPrice            Float // قیمت نهایی
  deliveryDate          DateTime // موعد تحویل
  participationProfit   Float // سود مشارکت
  isLocked              Boolean // نیاز به مجوز یا نه
  authorizedUsers       AuthorizedUser[]
  Order                 Order[]
}

model AuthorizedUser {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  saleCondition   CarSaleCondition @relation(fields: [saleConditionId], references: [id], onDelete: Cascade)
  saleConditionId String           @db.ObjectId
  nationalCode    String // کد ملی
  name            String
  family          String
}

model AppearanceSelection {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String           @db.ObjectId
  appearanceOption   AppearanceOption @relation(fields: [appearanceOptionId], references: [id], onDelete: Cascade)
  appearanceOptionId String           @db.ObjectId
  selectedOption     String // گزینه انتخاب‌شده توسط کاربر
}
